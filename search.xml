<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Fabric Event</title>
    <url>/2021/03/16/Fabric-Event/</url>
    <content><![CDATA[<h2 id="存在意义"><a href="#存在意义" class="headerlink" title="存在意义"></a>存在意义</h2><p>应用和网络交互的一种方式，应该说是应用被动接收网络信息的一种方式，使用户感知到网络的变化</p>
<p>应用主动与网络交互都是通过链码，包括系统链码用户链码</p>
<h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><ul>
<li>根据来源不同，分为用户链码发出的事件以及账本发出的事件，如下图所示</li>
</ul>
<p><img src="./Fabric-event/fabric-event.png" alt="fabric-event"></p>
<ul>
<li>根据事件类型的不同，分为<ul>
<li>BlockEvent</li>
<li>FilteredBlockEvent</li>
<li>TransactionStatefulEvent</li>
<li>ChaincodeEvent</li>
</ul>
</li>
</ul>
<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2>]]></content>
      <categories>
        <category>Fabric</category>
      </categories>
      <tags>
        <tag>Fabric BlockChain</tag>
      </tags>
  </entry>
  <entry>
    <title>Binary Search</title>
    <url>/2021/08/15/Binary-Search/</url>
    <content><![CDATA[<h1 id="1-经典二分查找"><a href="#1-经典二分查找" class="headerlink" title="1.经典二分查找"></a>1.经典二分查找</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组为有序数组，且不存在重复数字，若找不到目标数字则返回-1。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.length == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.length -<span class="number">1</span>, middle = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">        middle = left + (right - left) / <span class="number">2</span>;  <span class="comment">//防止left+right可能导致的数字溢出，因此采用此种方式</span></span><br><span class="line">        <span class="keyword">if</span>(nums[middle] == target)&#123;</span><br><span class="line">            <span class="keyword">return</span> middle;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[middle] &gt; target)&#123;</span><br><span class="line">            right = middle - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            left = middle + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="2-二分查找进化版"><a href="#2-二分查找进化版" class="headerlink" title="2. 二分查找进化版"></a>2. 二分查找进化版</h1><h2 id="2-1-寻找target的左-右边界"><a href="#2-1-寻找target的左-右边界" class="headerlink" title="2.1 寻找target的左/右边界"></a>2.1 寻找target的左/右边界</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 左边界即寻找最左边的等于target的数字的位置</span></span><br><span class="line"><span class="comment">// 如[1,2,2,4,6] target=2 则应返回位置1</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">binarySearchLeft</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> middle = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            middle = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">// 注意等于时的情况，right等于middle-1，往左边界逼近。最后退出循环时left=right+1，刚好为左边界</span></span><br><span class="line">            <span class="comment">// 另一种想法，循环条件为left&lt;right，当nums[middle]==target时，right=middle以保住不遗漏掉左边界，对于左边界而言此方法可行</span></span><br><span class="line">            <span class="keyword">if</span> (nums[middle] &gt;= target) &#123; </span><br><span class="line">                right = middle - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = middle + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// 当所有的数字都小于target的时候，跳出循环的时候left=nums.length</span></span><br><span class="line">        <span class="keyword">if</span> (left &gt;= nums.length || nums[left] != target) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 右边界</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">binarySearchRight</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> middle = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">     <span class="comment">// 另一种想法，循环条件为left&lt;right，当nums[middle]==target时，left=middle以保住不遗漏掉左边界，对于右边界而言此方法不可行。当nums[left]与nums[right]皆等于target时，middle计算的值为left，若left=middle，也就是left=left，陷入死循环</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            middle = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[middle] &gt; target) &#123;</span><br><span class="line">                right = middle - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = middle + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// 当所有的数字都大于target的时候，跳出循环时right=-1</span></span><br><span class="line">        <span class="keyword">if</span>(right &lt; <span class="number">0</span> || nums[right] != target) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 有边界解法2：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">binarySearchRight</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 为了保证右边界永远指向大于target的数值，否则假如一开始right指向的值等于target，那么循环退出left=right的时候，left指向的正好为右边界，与一开始right指向为大于target的值的情况冲突，因此将right设为nums.length</span></span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.length; </span><br><span class="line">        <span class="keyword">int</span> middle = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            middle = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[middle] &gt; target) &#123;</span><br><span class="line">                right = middle;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = middle + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(left&lt;<span class="number">1</span>||nums[left-<span class="number">1</span>]!=target) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="2-2-左边第一个大于target的值"><a href="#2-2-左边第一个大于target的值" class="headerlink" title="2.2 左边第一个大于target的值"></a>2.2 左边第一个大于target的值</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">binarySearchLeft</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> middle = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            middle = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[middle] &gt; target) &#123;</span><br><span class="line">                right = middle - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = middle + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// 当所有的数字都小于等于target的时候，跳出循环的时候left=nums.length</span></span><br><span class="line">        <span class="keyword">if</span> (left &gt;= nums.length || nums[left] != target) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-3-有序数组中target的左右边界leetcode34-中等"><a href="#2-3-有序数组中target的左右边界leetcode34-中等" class="headerlink" title="2.3 有序数组中target的左右边界leetcode34(中等)"></a>2.3 有序数组中target的左右边界<a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/">leetcode34(中等)</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解法1：遍历数组得到其左右边界，O(n)</span></span><br><span class="line">略</span><br><span class="line"><span class="comment">// 解法2：通过二分查找得到其左右边界</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] searchRange(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; binarySearchLeft(nums, target), binarySearchRight(nums, target) &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 解法3：二分查找得到左边界，第一个大于target的位置-1即为右边界，那么就要找到第一个大于等于target的值的位置和第一个大于target的值的位置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] searchRange(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">		<span class="keyword">if</span>(nums.length==<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> leftIndex = binarySearch(nums, target, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">int</span> rightIndex = binarySearch(nums, target, <span class="keyword">false</span>) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (leftIndex &gt;=<span class="number">0</span> &amp;&amp; rightIndex &lt; nums.length &amp;&amp; leftIndex &lt;= rightIndex &amp;&amp; nums[leftIndex] == target &amp;&amp; nums[rightIndex] == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;leftIndex, rightIndex&#125;;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target, <span class="keyword">boolean</span> lower)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.length - <span class="number">1</span>, ans = nums.length;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; target || (lower &amp;&amp; nums[mid] &gt;= target)) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm BinarySearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Fabric configtx.yaml详解</title>
    <url>/2021/03/11/Fabric-configtx-yaml%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Fabric</category>
      </categories>
      <tags>
        <tag>Fabric BlockChain</tag>
      </tags>
  </entry>
  <entry>
    <title>Fabric-java-sdk</title>
    <url>/2021/03/16/Fabric-java-sdk/</url>
    <content><![CDATA[<p>获取channel对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构建client</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建channel</span></span><br><span class="line"><span class="comment">// 1.</span></span><br><span class="line">client.newChannel()</span><br><span class="line">client.newChannel(String name) <span class="comment">// 只在client中创建一个channel对象，通常用于channel已在网络上存在的时候</span></span><br><span class="line">Peer peer = client.newPeer(<span class="string">&quot;peer1`&quot;</span>,<span class="string">&quot;grpc://127.0.0.1:7051&quot;</span>);</span><br><span class="line">channel.addPeer(peer);</span><br><span class="line">Orderer orderer = client.newOrderer(<span class="string">&quot;orderer1&quot;</span>,<span class="string">&quot;grpc://127.0.0.1:7050&quot;</span>);</span><br><span class="line">channel.addOrderer(orderer);</span><br><span class="line"><span class="comment">// 2.</span></span><br><span class="line">client.newChannel(String name, Orderer orderer, ChannelConfiguration channelConfiguration, <span class="keyword">byte</span>[]...)<span class="comment">// 向Orderer发送请求去创建channel</span></span><br><span class="line">    </span><br><span class="line">channel.initialize()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询交易</span></span><br><span class="line">TransactionInfo transactionInfo = channel.queryTransactionByID(<span class="string">&quot;&quot;</span>);</span><br><span class="line">Envelope envelope = transactionIndo.getTransactionEnvelope();</span><br><span class="line">ByteString byteString = envelope.getPayload()</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通道对象已创建并且初始化，直接从client中获取，但必须先有上面的创建channel对象的步骤</span></span><br><span class="line">Channel channel = client.getChannel(<span class="string">&quot;name&quot;</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Fabric</category>
      </categories>
      <tags>
        <tag>Fabric BlockChain</tag>
      </tags>
  </entry>
  <entry>
    <title>go advanced</title>
    <url>/2021/09/18/go-advanced/</url>
    <content><![CDATA[<h1 id="go"><a href="#go" class="headerlink" title="go"></a>go</h1><h1 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h1><h2 id="1-1-数据结构"><a href="#1-1-数据结构" class="headerlink" title="1.1 数据结构"></a>1.1 数据结构</h2><h3 id="1-1-1-slice"><a href="#1-1-1-slice" class="headerlink" title="1.1.1 slice"></a>1.1.1 slice</h3><h2 id="1-2-channel"><a href="#1-2-channel" class="headerlink" title="1.2 channel"></a>1.2 channel</h2><p>GO中的channel分为有缓存的channel以及无缓存channel，channel的出现是为了用于不同协程之间的通信</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">channel <span class="keyword">chan</span> <span class="keyword">string</span></span><br><span class="line">channel=<span class="built_in">make</span>(<span class="keyword">string</span>,&lt;size&gt;)</span><br></pre></td></tr></table></figure>

<p>对于channel的消费模型，可以分为以下几种：</p>
<ul>
<li>一写一读</li>
<li>一写多读</li>
<li>多读一写</li>
<li>多读多写</li>
</ul>
<p>经典使用场景：</p>
<p>（1）程序退出时，停掉其他goroutine，避免内存泄漏</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 相关groutine会有以下判断，此时应通过close()来通知其他goroutine而不是通过向exitChan中发送真正的数据，如struct&#123;&#125;&#123;&#125;。原因在于若发送真正的数据，由于有多个消费者，那么要发送相应数量的数据才能让每个gorouine获取到数据，执行退出。而close()执行之后每个消费者都能获取到一个数据，后者实现相对简单优雅。</span></span><br><span class="line"><span class="keyword">for</span>&#123;</span><br><span class="line">    <span class="keyword">select</span>&#123;</span><br><span class="line">        <span class="keyword">case</span> _ = &lt;- exitChan:</span><br><span class="line">        	........</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<span id="more"></span>



<h1 id="二、编程思路借鉴"><a href="#二、编程思路借鉴" class="headerlink" title="二、编程思路借鉴"></a>二、编程思路借鉴</h1><h2 id="2-1-对同一对象的频繁操作下的错误处理"><a href="#2-1-对同一对象的频繁操作下的错误处理" class="headerlink" title="2.1 对同一对象的频繁操作下的错误处理"></a>2.1 对同一对象的频繁操作下的错误处理</h2><h3 id="2-1-1-一般情况"><a href="#2-1-1-一般情况" class="headerlink" title="2.1.1 一般情况"></a>2.1.1 一般情况</h3><p>挨个执行并进行err判断</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-1-2-函数式编程"><a href="#2-1-2-函数式编程" class="headerlink" title="2.1.2 函数式编程"></a>2.1.2 函数式编程</h3><p>将频繁执行的部分抽出作为一个函数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">parse</span><span class="params">(r io.Reader)</span> <span class="params">(*Point, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> p Point</span><br><span class="line">    <span class="keyword">var</span> err error</span><br><span class="line">    <span class="comment">// 定义函数</span></span><br><span class="line">    read := <span class="function"><span class="keyword">func</span><span class="params">(data <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        err = binary.Read(r, binary.BigEndian, data)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    read(&amp;p.Longitude)</span><br><span class="line">    read(&amp;p.Latitude)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &amp;p, err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &amp;p, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-1-3-最后判断"><a href="#2-1-3-最后判断" class="headerlink" title="2.1.3 最后判断"></a>2.1.3 最后判断</h3><p>并不在每次执行后进行错误判断，而是通过定义结构体，将err作为属性，定义结构体函数进行重复化操作，最后判断err是否为nil</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Reader <span class="keyword">struct</span> &#123;</span><br><span class="line">    r   io.Reader</span><br><span class="line">    err error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Reader)</span> <span class="title">read</span><span class="params">(data <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 若之前执行未出错 则继续向下执行</span></span><br><span class="line">    <span class="keyword">if</span> r.err == <span class="literal">nil</span> &#123;</span><br><span class="line">        r.err = binary.Read(r.r, binary.BigEndian, data)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">parse</span><span class="params">(input io.Reader)</span> <span class="params">(*Point, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> p Point</span><br><span class="line">    r := Reader&#123;r: input&#125;</span><br><span class="line"></span><br><span class="line">    r.read(&amp;p.Longitude)</span><br><span class="line">    r.read(&amp;p.Latitude)</span><br><span class="line">    r.read(&amp;p.Distance)</span><br><span class="line">    r.read(&amp;p.ElevationGain)</span><br><span class="line">    r.read(&amp;p.ElevationLoss)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> r.err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, r.err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &amp;p, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Note:</strong>   <code>github.com/pkg/errors</code>库的使用需进一步学习以便更好使用。</p>
<h2 id="2-2-函数式编程实现自定义配置渲染"><a href="#2-2-函数式编程实现自定义配置渲染" class="headerlink" title="2.2 函数式编程实现自定义配置渲染"></a>2.2 函数式编程实现自定义配置渲染</h2><p>！！十分常用，比如grpc创建client/server时的配置传参</p>
<p><a href="https://coolshell.cn/articles/21146.html">参考博客</a></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个函数类型</span></span><br><span class="line"><span class="keyword">type</span> Option <span class="function"><span class="keyword">func</span><span class="params">(*Server)</span></span></span><br><span class="line"><span class="comment">// 定义一组函数,实现将传入参数渲染到server中</span></span><br><span class="line"><span class="comment">// 对于Protocol()来说，假如传参为“tcp”，那么将返回函数：func(s *Server)&#123;s.Protocol=&quot;tcp&quot;&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Protocol</span><span class="params">(p <span class="keyword">string</span>)</span> <span class="title">Option</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(s *Server)</span></span> &#123;</span><br><span class="line">        s.Protocol = p</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Timeout</span><span class="params">(timeout time.Duration)</span> <span class="title">Option</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(s *Server)</span></span> &#123;</span><br><span class="line">        s.Timeout = timeout</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MaxConns</span><span class="params">(maxconns <span class="keyword">int</span>)</span> <span class="title">Option</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(s *Server)</span></span> &#123;</span><br><span class="line">        s.MaxConns = maxconns</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TLS</span><span class="params">(tls *tls.Config)</span> <span class="title">Option</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(s *Server)</span></span> &#123;</span><br><span class="line">        s.TLS = tls</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 前面为必选参数，后面为可选参数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewServer</span><span class="params">(addr <span class="keyword">string</span>, port <span class="keyword">int</span>, options ...<span class="keyword">func</span>(*Server)</span>) <span class="params">(*Server, error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">  srv := Server&#123;</span><br><span class="line">    Addr:     addr,</span><br><span class="line">    Port:     port,</span><br><span class="line">    Protocol: <span class="string">&quot;tcp&quot;</span>,</span><br><span class="line">    Timeout:  <span class="number">30</span> * time.Second,</span><br><span class="line">    MaxConns: <span class="number">1000</span>,</span><br><span class="line">    TLS:      <span class="literal">nil</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 根据传入的函数，挨个渲染server</span></span><br><span class="line">  <span class="keyword">for</span> _, option := <span class="keyword">range</span> options &#123;</span><br><span class="line">    option(&amp;srv)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="keyword">return</span> &amp;srv, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 那么创建server对象的时候，可以调用如下，根据需要进行传参：</span></span><br><span class="line">s1, _ := NewServer(<span class="string">&quot;localhost&quot;</span>, <span class="number">1024</span>)</span><br><span class="line">s2, _ := NewServer(<span class="string">&quot;localhost&quot;</span>, <span class="number">2048</span>, Protocol(<span class="string">&quot;udp&quot;</span>))</span><br><span class="line">s3, _ := NewServer(<span class="string">&quot;0.0.0.0&quot;</span>, <span class="number">8080</span>, Timeout(<span class="number">300</span>*time.Second), MaxConns(<span class="number">1000</span>))</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/03/08/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>vault</title>
    <url>/2021/03/11/vault/</url>
    <content><![CDATA[<p><a href="https://www.vaultproject.io/docs">Vault</a>是密钥管理，加密即服务和特权访问管理的工具，其<a href="https://github.com/hashicorp/vault">开源代码</a>托管在github。</p>
<p>vault server启动之后处于seal(密封)状态，此时只能unseal，其他什么都做不了。</p>
]]></content>
      <categories>
        <category>Security</category>
      </categories>
      <tags>
        <tag>Security Secret-Management</tag>
      </tags>
  </entry>
  <entry>
    <title>http</title>
    <url>/2021/09/24/http/</url>
    <content><![CDATA[<h1 id="http-1-0"><a href="#http-1-0" class="headerlink" title="http 1.0"></a>http 1.0</h1><h2 id="1-基本特征"><a href="#1-基本特征" class="headerlink" title="1. 基本特征"></a>1. 基本特征</h2><p>无状态 无连接的应用层协议</p>
<p>client每次请求都要和server建立一个TCP连接，server处理完成后立即断开连接，也就是一来一回一次通信，一请求一回答</p>
<p>那么存在的问题就是server无法主动发送消息给client，每次建立TCP连接也都要花费一定时间</p>
<p>由于http 1.0规定收到response才能发起下一个request，因此若一直未收到某response，那么将会阻塞其余的request</p>
<h2 id="2-报文结构"><a href="#2-报文结构" class="headerlink" title="2. 报文结构"></a>2. 报文结构</h2><h3 id="2-1-请求报文"><a href="#2-1-请求报文" class="headerlink" title="2.1 请求报文"></a>2.1 请求报文</h3><h4 id="2-1-1-报文格式"><a href="#2-1-1-报文格式" class="headerlink" title="2.1.1 报文格式"></a>2.1.1 报文格式</h4><p>client—&gt;server   报文的所有字段都是ASCII码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[方法][ ][URL][ ][版本][CRLF]          <span class="comment">// 请求头，如 GET /index.html http/1.0</span></span><br><span class="line">[首部字段名][:][ ][首部字段值][CRLF]     <span class="comment">// 首部行，说明client/server/报文主体信息</span></span><br><span class="line">[首部字段名][:][ ][首部字段值][CRLF]</span><br><span class="line">……</span><br><span class="line">[CRLF]</span><br><span class="line">[请求内容]</span><br></pre></td></tr></table></figure>

<h4 id="2-1-2-请求方法"><a href="#2-1-2-请求方法" class="headerlink" title="2.1.2 请求方法"></a>2.1.2 请求方法</h4><p>http1.0中只有get post head三种</p>
<h4 id="2-1-3-首部字段"><a href="#2-1-3-首部字段" class="headerlink" title="2.1.3 首部字段"></a>2.1.3 首部字段</h4><table>
<thead>
<tr>
<th>头（header）</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>User- Agent</td>
<td>关于浏览器和它平台的信息，如Moilla5.0</td>
</tr>
<tr>
<td>Accept</td>
<td>客户能处理的页面的类型，如text/html</td>
</tr>
<tr>
<td>Accept-Charset</td>
<td>客户可以接受的字符集，如Unicode-1-1</td>
</tr>
<tr>
<td>Accept-Encoding</td>
<td>客户能处理的页面编码方法，如gzip</td>
</tr>
<tr>
<td>Accept-Language</td>
<td>客户能处理的自然语言,如en(英语)，zh- cn(简体中文)</td>
</tr>
<tr>
<td>Host</td>
<td>服务器的DNS名称。从URL中提取出来，必需。</td>
</tr>
<tr>
<td>Authorization</td>
<td>客户的信息凭据列表</td>
</tr>
<tr>
<td>Cookie</td>
<td>将以前设置的Cookie送回服务器器,可用来作为会话信息</td>
</tr>
<tr>
<td>Date</td>
<td>消息被发送时的日期和时间</td>
</tr>
</tbody></table>
<span id="more"></span>



<h3 id="2-2-响应报文"><a href="#2-2-响应报文" class="headerlink" title="2.2 响应报文"></a>2.2 响应报文</h3><h4 id="2-2-1-报文格式"><a href="#2-2-1-报文格式" class="headerlink" title="2.2.1 报文格式"></a>2.2.1 报文格式</h4><p>所有字段都是ASCII码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[版本][ ][状态码][ ][短语][CRLF]   <span class="comment">// 如HTTP/1.1 200 OK</span></span><br><span class="line">[首部字段名][:][ ][首部字段值][CRLF]</span><br><span class="line">[首部字段名][:][ ][首部字段值][CRLF]</span><br><span class="line">……</span><br><span class="line">[CRLF]</span><br><span class="line">[实体主体]</span><br></pre></td></tr></table></figure>

<h4 id="2-2-2-状态码"><a href="#2-2-2-状态码" class="headerlink" title="2.2.2 状态码"></a>2.2.2 状态码</h4><table>
<thead>
<tr>
<th>状态码</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>1xx</td>
<td>通知信息</td>
</tr>
<tr>
<td>2xx</td>
<td>成功</td>
</tr>
<tr>
<td>3xx</td>
<td>重定向</td>
</tr>
<tr>
<td>4xx</td>
<td>客户端错误</td>
</tr>
<tr>
<td>5xx</td>
<td>服务器错误</td>
</tr>
</tbody></table>
<h4 id="2-2-3-首部字段"><a href="#2-2-3-首部字段" class="headerlink" title="2.2.3 首部字段"></a>2.2.3 首部字段</h4><table>
<thead>
<tr>
<th>头（header）</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Date</td>
<td>消息被发送时的日期和时间</td>
</tr>
<tr>
<td>Server</td>
<td>关于服务器的信息，如Microsoft IS/6.0</td>
</tr>
<tr>
<td>Content-Encoding</td>
<td>内容是如何被编码的(如gzip)</td>
</tr>
<tr>
<td>Content-Language</td>
<td>页面所使用的自然语言</td>
</tr>
<tr>
<td>Content-Length</td>
<td>以字节计算的页面长度</td>
</tr>
<tr>
<td>Content-Type</td>
<td>页面的MIIME类型</td>
</tr>
<tr>
<td>Last-Modified</td>
<td>页面最后被修改的时间和日期，在页面缓存机制中意义重大</td>
</tr>
<tr>
<td>Location</td>
<td>指示客户将请求发送给别处，即重定向到另个URL</td>
</tr>
<tr>
<td>Set-Cookie</td>
<td>服务器希望客户保存一个Cookie</td>
</tr>
</tbody></table>
<h1 id="http-1-1"><a href="#http-1-1" class="headerlink" title="http 1.1"></a>http 1.1</h1><h2 id="1-长连接"><a href="#1-长连接" class="headerlink" title="1. 长连接"></a>1. 长连接</h2><p>增加connection字段，通过设置keep-alive保持http连接不断。避免每次发送消息都要重新建立与释放TCP连接，提高网络利用率</p>
<p>如果客户端想关闭http连接，可在请求头中携带Connection:false</p>
<p>对于http1.0，client/server可以通过连接状态判断请求/响应边界，但是对于长连接来说，由于发送完请求/回复后依旧不断连，那么则需要其他方法来判断请求/响应边界，那么这个附加判断条件就是content-length，如果content-length和实际不一致会如何？通常来说content-length小于实际那么内容将会被截断，而且下一个请求解析出现错乱；content-length大于实际则会导致pending，误以为内容还没发送完。</p>
<p>实际上可能会遇到要发送的内容过大的情况，此时就引入下面的chunked：</p>
<h3 id="2-chunked"><a href="#2-chunked" class="headerlink" title="2. chunked"></a>2. chunked</h3><p>对于一次请求或者回复数据较大的情况，无法一次请求发送，允许在头部添加<code> Transfer-Encoding =chunked</code>字段，说明此次请求/应答分批次进行。 每个分块包含十六进制的长度值和数据，长度值独占一行，长度不包括它结尾的 CRLF（\r\n），也不包括分块数据结尾的 CRLF。最后一个分块长度值必须为 0，对应的分块数据没有内容，表示实体结束。 </p>
<p>同样的，对于一次请求，必须chunked数据全部发送后，才能收到回复。</p>
<p>例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 请求中使用chunked</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">httpTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    pr,pw:=io.Pipe()</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">        pw.Write([]<span class="keyword">byte</span>(<span class="string">&quot;test&quot;</span>)) </span><br><span class="line">        pw.Close()</span><br><span class="line">    &#125;()</span><br><span class="line">    request,err:=http.NewRequest(<span class="string">&quot;POST&quot;</span>,<span class="string">&quot;URL&quot;</span>,pr)</span><br><span class="line">    <span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 发送时会自动加上chunked header</span></span><br><span class="line">    resp,err:=http.DefaultClient.Do(request)</span><br><span class="line">    <span class="comment">//从resp.Body中读取数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//应答中使用chunked</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-pipeline"><a href="#3-pipeline" class="headerlink" title="3. pipeline"></a>3. pipeline</h3><p>TCP连接复用减少了连接建立关闭的时间，但是一问一答的串行方式仍然效率不高，如果前一个请求十分耗时，那么后序请求都会受到影响，被称为线头阻塞(head of line blocking)，因此http1.1引入pipeline机制，允许未收到应答就发送下一个请求，但收到响应的顺序和发送请求的顺序一致</p>
<h3 id="3-host头部"><a href="#3-host头部" class="headerlink" title="3. host头部"></a>3. host头部</h3><p>TO BE CONTINUED</p>
<h1 id="http-2-0"><a href="#http-2-0" class="headerlink" title="http 2.0"></a>http 2.0</h1><p>HTTP/1.1 版的头信息肯定是文本（ASCII编码），数据体可以是文本，也可以是二进制。HTTP/2 则是一个彻底的二进制协议，头信息和数据体都是二进制，并且统称为”帧”（frame）：头信息帧和数据帧。</p>
<p>二进制协议的一个好处是，可以定义额外的帧。HTTP/2 定义了近十种帧，为将来的高级应用打好了基础。如果使用文本实现这种功能，解析数据将会变得非常麻烦，二进制解析则方便得多</p>
<p>二进制分帧</p>
<p><a href="https://cabulous.medium.com/http-2-and-how-it-works-9f645458e4b2">https://cabulous.medium.com/http-2-and-how-it-works-9f645458e4b2</a></p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>Network http</tag>
      </tags>
  </entry>
  <entry>
    <title>GRPC-GO</title>
    <url>/2022/02/08/GRPC-GO/</url>
    <content><![CDATA[<p>​                                                                        <strong>TO BE CONTINUED</strong></p>
<hr>
<h1 id="1-rpc交互整体过程"><a href="#1-rpc交互整体过程" class="headerlink" title="1. rpc交互整体过程"></a>1. rpc交互整体过程</h1><h2 id="1-1-rpc链接"><a href="#1-1-rpc链接" class="headerlink" title="1.1 rpc链接"></a>1.1 rpc链接</h2><p>解析器-&gt;server地址列表</p>
<p>平衡器-&gt;跟谁建立tcp链接</p>
<p>net包-&gt;tcp链接</p>
<p>http2帧交互过程，如接下来传输的帧的大小、窗口大小？（为什么会有这一步？）</p>
<p><strong>Q: grpc over http2如何理解？？？</strong>   <a href="https://hengyun.tech/thinking-about-grpc-http2/">https://hengyun.tech/thinking-about-grpc-http2/</a></p>
<p><a href="https://ninokop.github.io/2018/06/18/grpc-http2/">https://ninokop.github.io/2018/06/18/grpc-http2/</a></p>
<p>图严格来说不准确，并不能代表绝对上的时间，只能从代表从某一方来看的相对时间，比如，对server来说，其会先发送设置帧、窗口更新帧，然后处理client发过来的PRI(PRI可能在server发送设置帧前就已发送到server,也可能在之后)，若在读取PRI时还未发送则reader会堵塞，直到有数据</p>
<p><a href="https://kingjcy.github.io/post/golang/go-io/">golang io处理相关</a></p>
<p>![0-grpc 建立连接](D:\allFile\blog\hexo\source_posts\GRPC-GO\0-grpc 建立连接.png)</p>
<span id="more"></span>



<h2 id="1-2-rpc请求"><a href="#1-2-rpc请求" class="headerlink" title="1.2 rpc请求"></a>1.2 rpc请求</h2><h1 id="2-server端"><a href="#2-server端" class="headerlink" title="2. server端"></a>2. server端</h1><h2 id="2-1-服务注册"><a href="#2-1-服务注册" class="headerlink" title="2.1 服务注册"></a>2.1 服务注册</h2><p>也就是我们proto中定义的服务，包括四种类型，如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="3-agent端"><a href="#3-agent端" class="headerlink" title="3. agent端"></a>3. agent端</h1><p>为什么grpc要支持地址的解析与选择？有什么痛点吗？</p>
<p>resolver   balancer    picker</p>
<p>解析地址-&gt;建立连接(一个/全部)-&gt;具体选择哪个进行通信</p>
<h2 id="3-1-解析器"><a href="#3-1-解析器" class="headerlink" title="3.1 解析器"></a>3.1 解析器</h2><p>根据链接地址获取后端对应的grpc服务器地址列表</p>
<h2 id="3-2-平衡器"><a href="#3-2-平衡器" class="headerlink" title="3.2 平衡器"></a>3.2 平衡器</h2><p>根据grpc服务器列表来建立tcp链接</p>
<h3 id="3-2-1-pick-first"><a href="#3-2-1-pick-first" class="headerlink" title="3.2.1 pick-first"></a>3.2.1 pick-first</h3><h3 id="3-2-2-round-robin"><a href="#3-2-2-round-robin" class="headerlink" title="3.2.2 round-robin"></a>3.2.2 round-robin</h3><p>即轮询平衡器，这个轮询是指与所有解析出来的server地址都建立连接，轮询选择一个tcp连接进行使用</p>
<p>Note:这个轮询具体是什么时间轮询？当前ClientConn断连时？那么对于长连接stream形式来说，这个轮询并没有起到LB作用？毕竟同一client频繁访问的话都是使用同一连接，发送请求到同一server。</p>
<h3 id="3-2-3-grpclb"><a href="#3-2-3-grpclb" class="headerlink" title="3.2.3 grpclb"></a>3.2.3 grpclb</h3><p>提供接口供实现自定义lb以获取服务端列表 -&gt; 源码<code>GRPC_GO/balancer/grpclb/grpc_lb_v1</code>目录下</p>
<p>也就是相当于实现自定义解析器，此解析器从grpc LB中获取server地址list，然后再根据pick-first或者round-robin选择连接一个或全部以及选择哪个连接进行通信</p>
<p>此时client访问地址实际为LB地址，上述具体操作GRPC已帮助实现-&gt;<code>GRPC_GO/balancer/grpclb</code>下的代码中，Client创建连接时代码示例如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">serviceConfig:=<span class="string">`&#123;</span></span><br><span class="line"><span class="string">&quot;loadBalancingPolicy&quot;:&quot;grpclb&quot;,</span></span><br><span class="line"><span class="string">&quot;loadBalancingConfig&quot;:[</span></span><br><span class="line"><span class="string">    	&#123;</span></span><br><span class="line"><span class="string">            &quot;grpclb&quot;:&#123;</span></span><br><span class="line"><span class="string">                &quot;childPolicy&quot;:[</span></span><br><span class="line"><span class="string">               		&#123;&quot;round_robin&quot;:true&#125;</span></span><br><span class="line"><span class="string">                ]</span></span><br><span class="line"><span class="string">        	&#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">&#125;`</span></span><br><span class="line">conn,err:=grpc.Dial(fmt.Sprintf(<span class="string">&quot;%s:///%s&quot;</span>,<span class="string">&quot;define-resolver-name&quot;</span>,<span class="string">&quot;lbAddr&quot;</span>),grpc.WithBlock(),grpc.WithDefaultServiceConfig(serviceVonfig))</span><br></pre></td></tr></table></figure>















]]></content>
      <tags>
        <tag>GRPC</tag>
      </tags>
  </entry>
  <entry>
    <title>etcd</title>
    <url>/2022/04/13/etcd/</url>
    <content><![CDATA[<h1 id="一、使用场景"><a href="#一、使用场景" class="headerlink" title="一、使用场景"></a>一、使用场景</h1><h2 id="1-1-主备切换"><a href="#1-1-主备切换" class="headerlink" title="1.1 主备切换"></a>1.1 主备切换</h2><h3 id="1-1-1-流程介绍"><a href="#1-1-1-流程介绍" class="headerlink" title="1.1.1 流程介绍"></a>1.1.1 流程介绍</h3><p><a href="https://blog.csdn.net/cyq6239075/article/details/109862443">etcd自带concurrency介绍</a></p>
<h3 id="1-1-2-代码示例-GO"><a href="#1-1-2-代码示例-GO" class="headerlink" title="1.1.2 代码示例(GO)"></a>1.1.2 代码示例(GO)</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="1-1-3-point"><a href="#1-1-3-point" class="headerlink" title="1.1.3 point"></a>1.1.3 point</h3>]]></content>
  </entry>
  <entry>
    <title>linux手册</title>
    <url>/2022/04/26/linux%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<h2 id="用户和用户组"><a href="#用户和用户组" class="headerlink" title="用户和用户组"></a>用户和用户组</h2><h3 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h3><p>linux是多用户多任务操作系统，允许多个用户同时登陆进行不同操作。为了对用户权限进行更好的管理，进而产生用户组的概念</p>
<p><a href="http://uprprc.net/2018/05/15/user-process-permission.html">整体串讲</a></p>
<h3 id="2-用户"><a href="#2-用户" class="headerlink" title="2. 用户"></a>2. 用户</h3><p>用户具有名称和id两个属性，id范围为0-65535，</p>
<p>根据用户名查看用户信息命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">id [用户名]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 以root为例，输出如下：</span></span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)  </span><br></pre></td></tr></table></figure>

<p>用户信息存储在<code>/etc/passwd</code>文件中</p>
<span id="more"></span>



<h4 id="2-2-用户分类"><a href="#2-2-用户分类" class="headerlink" title="2.2 用户分类"></a>2.2 用户分类</h4><p>I：根据UID范围</p>
<p>UID=0 -&gt; root：</p>
<p>系统管理员超级用户，系统唯一，可以登陆系统，可以操作<strong>任何文件和命令</strong>，拥有最高权限</p>
<p>UID=1-999 -&gt; 系统用户：</p>
<p>UID=1000-65535（2.6.x 内核之前）、1000-2<sup>32</sup>-1（2.6.x 内核之后） -&gt; 普通用户：</p>
<p>II：根据是否可以登录（待斟酌）</p>
<p>虚拟用户：不可登录，只能某些服务运行时使用？</p>
<p>真实用户：可登录</p>
<h4 id="2-2-切换用户"><a href="#2-2-切换用户" class="headerlink" title="2.2 切换用户"></a>2.2 切换用户</h4><p>I：sudo（super user do）</p>
<p>暂时提权到root以执行某些命令，要执行的命令前加上sudo即可，需要输入当前用户的密码（也可以设置为不用输入密码），当然还有一个隐藏前提，即此用户拥有sudo 权限，如何获取sudo权限，后面再具体介绍。</p>
<p>II：su（shift user）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su [用户名]</span><br></pre></td></tr></table></figure>

<p>切换到其他用户，默认只是切换身份，并没有切换<strong>环境变量</strong>，需要输入切换后账号的密码，启动新的shell，以切换后账号身份运行，直到exit（root用户切换到其他任何用户都皆不用输入密码）</p>
<p>如果su后面不跟用户名，默认切到root</p>
<p>III：su -</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su - [用户名]</span><br></pre></td></tr></table></figure>

<p>切换到其他用户，切换用户身份的同时也切换环境变量，后面不加用户名则默认为root</p>
<p>IV：sudo su   |   sudo su -</p>
<p>即首先利用sudo提权到root用户，再su切到root用户，好处是不用输入root的密码，如果设置sudo不用输入当前用户密码的话，就可以直接切到root用户了</p>
<p>然后我们来看一下普通用户如何才能有sudo权限，方法有三：</p>
<p>I：用户添加到sudo用户组</p>
<p>II：sudoers文件</p>
<p>III： /etc/sudoers.d/ 目录</p>
<p>详情见此链接<a href="https://p3terx.com/archives/linux-grants-normal-user-sudo-permission.html">Linux 中授予普通用户 sudo 权限的正确方法</a></p>
<p>当然并不是所有用户都可以su | su - 切到root用户，若如此，root密码一旦泄露则任何用户都可切到root了，因此通过限制切到root的用户的权限以尽量降低可能降低的损失，具体权限管理通过wheel组，具体如链接所示<a href="https://www.cnblogs.com/kerrycode/p/7053118.html">linux下wheel用户组介绍</a></p>
<h4 id="2-3-实际用户-有效用户"><a href="#2-3-实际用户-有效用户" class="headerlink" title="2.3 实际用户/有效用户"></a>2.3 实际用户/有效用户</h4><p><a href="http://wjhsh.net/keviwu-p-6104838.html">例子介绍</a></p>
<h3 id="3-用户组"><a href="#3-用户组" class="headerlink" title="3. 用户组"></a>3. 用户组</h3><p>用户组同样具有名称和id两个属性，用户组id范围为：，同样0号是root用户组</p>
<p>执行如下命令可显示当前用户的所有用户组（主组+附加组）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">groups</span><br></pre></td></tr></table></figure>

<p>用户组信息存储在<code>/etc/group</code>中，内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/group</span><br><span class="line">  user1:x:1002:</span><br></pre></td></tr></table></figure>

<p> 每个用户组为一条记录，四个字段分别为：用户组名，密码(不直接显示)，组ID，组内用户列表（仅显示将该组作为附加组的用户） </p>
<h4 id="3-1-主组与附属组"><a href="#3-1-主组与附属组" class="headerlink" title="3.1 主组与附属组"></a>3.1 主组与附属组</h4><p>主组，是用户的基本属组，使用<code>useradd</code>命令创建用户时若未指定用户组则会默认自动生成相同名称的用户组作为此用户的主组（前提如下）：</p>
<p> The group name or number of the user′s initial login group. The group name must exist. A group number must refer to an already existing group.<br>If not specified, the bahavior of useradd will depend on the <strong>USERGROUPS_ENAB</strong> variable in <strong>/etc/login.defs</strong>. If this variable is set to yes (or -U/–user-group is specified on the command line), a group will be created for the user, with the same name as her login name. If the variable is set to no (or -N/–no-user-group is specified on the command line), useradd will set the primary group of the new user to the value specified by the GROUP variable in  <strong>/etc/default/useradd</strong>, or 100 by default. </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建用户时指定主组</span></span><br><span class="line">useradd -g [主组名称] 用户名称</span><br></pre></td></tr></table></figure>

<p>用户组必须有且只有一个主组，可以有0个或者N个附属组，用于的gid即为主组id， 当用户own某个文件或目录时，默认该文件或目录的group owner为该用户的<strong>主组</strong>（当然，可以通过chgrp修改group owner） </p>
<p>用户可以更改主组，但不可从主组中删除，但可以从附属组中删除；若删除用户时此用户主组中无其他用户，那么主组将被一同删除</p>
<h3 id="4-文件-进程与用户-用户组"><a href="#4-文件-进程与用户-用户组" class="headerlink" title="4. 文件/进程与用户/用户组"></a>4. 文件/进程与用户/用户组</h3><h4 id="4-1-文件与用户-用户组"><a href="#4-1-文件与用户-用户组" class="headerlink" title="4.1 文件与用户/用户组"></a>4.1 文件与用户/用户组</h4><p><strong>文件权限</strong></p>
<p>一个文件的所有者总是能够修改文件的权限，除非这个用户不能访问包含此文件的目录</p>
<p>r w x</p>
<p>一个没有<code>x</code>权限的脚本可以通过bash xxx.sh执行</p>
<p><strong>目录权限</strong></p>
<p>r： 有权查看目录内都有什么文件 </p>
<p>w： 在目录内新建文件 </p>
<p>x： 访问目录内的文件</p>
<p>因此如果想读取某个目录下的文件，那么需要前面所有目录的<code>x</code>权限以及文件的<code>r</code>权限</p>
<h4 id="4-2-进程与用户-用户组"><a href="#4-2-进程与用户-用户组" class="headerlink" title="4.2 进程与用户/用户组"></a>4.2 进程与用户/用户组</h4><ul>
<li>用户只能控制<strong>属于自己</strong>的进程</li>
<li>…除非用户是”root” - 它可以控制运行在系统中的任意进程</li>
<li>…假定一个进程没有处于非常”僵硬”的状态。</li>
<li>使用PID(进程ID)终止一个进程：</li>
</ul>
<p>进程对文件的操作权限取决于其运行的用户</p>
<p>进程的有效用户组用于文件权限检查</p>
]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>GRPC-GO使用相关</title>
    <url>/2022/04/28/GRPC-GO%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h1 id="1-入门版client-server"><a href="#1-入门版client-server" class="headerlink" title="1. 入门版client server"></a>1. 入门版client server</h1><p>pb.go文件生成的方式  版本问题</p>
<h1 id="2-protobuf-json"><a href="#2-protobuf-json" class="headerlink" title="2. protobuf json"></a>2. protobuf json</h1><p>不同内容之间的转换</p>
]]></content>
  </entry>
  <entry>
    <title>Linux-network</title>
    <url>/2022/05/11/Linux-network/</url>
    <content><![CDATA[<h1 id="1-网卡与ip"><a href="#1-网卡与ip" class="headerlink" title="1. 网卡与ip"></a>1. 网卡与ip</h1><p>一张物理网卡可以通过创建多个虚拟网卡的方式实现配置多个ip的效果，具体如下：</p>
<p>（1）临时生效</p>
<p>重启服务器或者网络，虚拟网卡消失</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建虚拟网卡：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> eth0:0  前者是物理网卡名称，后者是虚拟网卡编号，范围是0-255</span></span><br><span class="line">sudo ifconfig eth0:0 192.168.10.10 up</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除虚拟网卡</span></span><br><span class="line">sudo ifconfig eth0:0 down</span><br></pre></td></tr></table></figure>

<p>（2）通过修改配置文件实现，命令如下：</p>
<p>不同类型linux中有所不同， ubuntu下网卡的配置文件是<code>/etc/network/interfaces</code>，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/network/interfaces</span><br><span class="line"><span class="meta">#</span><span class="bash"> 所有的网卡的配置都写在这一个文件里</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启网络，使之生效</span></span><br><span class="line">sudo /etc/init.d/networking restart</span><br></pre></td></tr></table></figure>

<p>redhat中需要在<code>/etc/sysconfig/network-scripts</code>下创建对应的文件，如ifcfg-eth0:0，文件内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">DEVICE=eth0:0</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">ONBOOT=yes</span><br><span class="line">NM_CONTROLLED=yes</span><br><span class="line">BOOTPROTO=none</span><br><span class="line">IPADDR=192.168.80.223</span><br><span class="line">PREFIX=24</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=yes</span><br><span class="line">IPV6INIT=no</span><br><span class="line">NAME=&quot;System eth0:0&quot;</span><br><span class="line">HWADDR=00:0C:29:82:AA:8B</span><br></pre></td></tr></table></figure>

<p>以上两种方法虚拟出的网卡与物理网卡Mac地址相同，如果想要不同，需创建tap，具体如下：</p>
<p>（3）tap</p>
<p>即通过软件模拟的网络设备，tap模拟了以太网设备</p>
<p>具体介绍见<a href="http://www.freeoa.net/osuport/netmanage/tun-tap-study-note_3411.html">虚拟网卡TUN TAP</a></p>
]]></content>
  </entry>
  <entry>
    <title>Linux-rpm</title>
    <url>/2022/05/14/Linux-rpm/</url>
    <content><![CDATA[<h1 id="1-rpm简介"><a href="#1-rpm简介" class="headerlink" title="1. rpm简介"></a>1. rpm简介</h1><p> Redhat Package Manager，原本是RedHat Linux发行版用来管理Linux各项套件的软件，遵循GPL协议，因此在多种linux版本中都有采用。</p>
<p>rpm使用命令可通过<code>rpm --help</code>获取，此处不再赘述，接下来将叙述rpm打包相关内容。</p>
<h1 id="2-打包过程"><a href="#2-打包过程" class="headerlink" title="2. 打包过程"></a>2. 打包过程</h1><p>用到的软件是<code>rpmbuild</code>，<code>rpmbuild</code>通过软件包的SPEC描述文件生成rpm包，因此rpm打包的关键就在于SPEC描述文件。</p>
<h2 id="2-1-打包目录"><a href="#2-1-打包目录" class="headerlink" title="2.1 打包目录"></a>2.1 打包目录</h2><p> rpm 打包目录有一些严格的层次上的要求。 </p>
<p>rpm 的版本 &lt;=4.4.x，rpmbuid 工具其默认的工作路径是 <strong>/usr/src/redhat</strong> 因为权限的问题，普通用户不能制作 rpm 包，制作 rpm 软件包时必须切换到 <strong>root</strong> 身份才可以。</p>
<p>rpm 从 4.5.x 版本开始，将 rpmbuid 的默认工作路径移动到用户家目录下的 rpmbuild 目录里，即 <strong>$HOME/rpmbuild</strong> ，并且推荐用户在制作 rpm 软件包时尽量不要以 root 身份进行操作。</p>
<p>rpmbuild 默认工作路径的确定，通常由在 <strong>/usr/lib/rpm/macros</strong> 这个文件里的一个叫做 <strong>%_topdir</strong> 的宏变量来定义。如果用户想更改这个目录名，rpm 官方并不推荐直接更改这个目录，而是在用户家目录下建立一个名为 <strong>.rpmmacros</strong> 的隐藏文件 (Linux 下隐藏文件，前面的点不能少)，然后在里面重新定义 <strong>%_topdir</strong>，指向一个新的目录名。这样就可以满足某些用户的差异化需求了。通常情况下.rpmmacros 文件里一般只有一行内容，如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash">_topdir    <span class="variable">$HOME</span>/myrpmbuildenv</span> </span><br></pre></td></tr></table></figure>

<p>在 %_topdir 目录下一般需要建立 6 个目录 </p>
<table>
<thead>
<tr>
<th>目录名</th>
<th>说明</th>
<th>macros 中的宏名</th>
</tr>
</thead>
<tbody><tr>
<td>BUILD</td>
<td>编译 rpm 包的临时目录</td>
<td>%_builddir</td>
</tr>
<tr>
<td>BUILDROOT</td>
<td>编译后生成的软件临时安装目录</td>
<td>%_buildrootdir</td>
</tr>
<tr>
<td>RPMS</td>
<td>最终生成的可安装 rpm 包的所在目录</td>
<td>%_rpmdir</td>
</tr>
<tr>
<td>SOURCES</td>
<td>所有源代码和补丁文件的存放目录</td>
<td>%_sourcedir</td>
</tr>
<tr>
<td>SPECS</td>
<td>存放 SPEC 文件的目录</td>
<td>%_specdir</td>
</tr>
<tr>
<td>SRPMS</td>
<td>软件最终的 rpm 源码格式存放路径</td>
<td>%_srcrpmdir</td>
</tr>
</tbody></table>
<p>如果有安装 rpmdevtools，可以使用 rpmdev-setuptree 命令在当前用户 home/rpmbuild 目录里自动建立上述目录。</p>
<h2 id="2-2-宏"><a href="#2-2-宏" class="headerlink" title="2.2 宏"></a>2.2 宏</h2><p>RPM通过宏定义一些目录路径及体系结构等，保存在<code>/usr/lib/rpm/macros</code>中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash">&#123;_sysconfdir&#125;        /etc</span></span><br><span class="line"><span class="meta">%</span><span class="bash">&#123;_prefix&#125;            /usr</span></span><br><span class="line"><span class="meta">%</span><span class="bash">&#123;_exec_prefix&#125;       %&#123;_prefix&#125;</span></span><br><span class="line"><span class="meta">%</span><span class="bash">&#123;_bindir&#125;            %&#123;_exec_prefix&#125;/bin</span></span><br><span class="line"><span class="meta">%</span><span class="bash">&#123;_lib&#125;               lib (lib64 on 64bit systems)</span></span><br><span class="line"><span class="meta">%</span><span class="bash">&#123;_libdir&#125;            %&#123;_exec_prefix&#125;/%&#123;_lib&#125;</span></span><br><span class="line"><span class="meta">%</span><span class="bash">&#123;_libexecdir&#125;        %&#123;_exec_prefix&#125;/libexec</span></span><br><span class="line"><span class="meta">%</span><span class="bash">&#123;_sbindir&#125;           %&#123;_exec_prefix&#125;/sbin</span></span><br><span class="line"><span class="meta">%</span><span class="bash">&#123;_sharedstatedir&#125;    /var/lib</span></span><br><span class="line"><span class="meta">%</span><span class="bash">&#123;_datadir&#125;           %&#123;_prefix&#125;/share</span></span><br><span class="line"><span class="meta">%</span><span class="bash">&#123;_includedir&#125;        %&#123;_prefix&#125;/include</span></span><br><span class="line"><span class="meta">%</span><span class="bash">&#123;_oldincludedir&#125;     /usr/include</span></span><br><span class="line"><span class="meta">%</span><span class="bash">&#123;_infodir&#125;           /usr/share/info</span></span><br><span class="line"><span class="meta">%</span><span class="bash">&#123;_mandir&#125;            /usr/share/man</span></span><br><span class="line"><span class="meta">%</span><span class="bash">&#123;_localstatedir&#125;     /var</span></span><br><span class="line"><span class="meta">%</span><span class="bash">&#123;_initddir&#125;          %&#123;_sysconfdir&#125;/rc.d/init.d</span> </span><br><span class="line"><span class="meta">%</span><span class="bash">&#123;_topdir&#125;            %&#123;getenv:HOME&#125;/rpmbuild</span></span><br><span class="line"><span class="meta">%</span><span class="bash">&#123;_builddir&#125;          %&#123;_topdir&#125;/BUILD</span></span><br><span class="line"><span class="meta">%</span><span class="bash">&#123;_rpmdir&#125;            %&#123;_topdir&#125;/RPMS</span></span><br><span class="line"><span class="meta">%</span><span class="bash">&#123;_sourcedir&#125;         %&#123;_topdir&#125;/SOURCES</span></span><br><span class="line"><span class="meta">%</span><span class="bash">&#123;_specdir&#125;           %&#123;_topdir&#125;/SPECS</span></span><br><span class="line"><span class="meta">%</span><span class="bash">&#123;_srcrpmdir&#125;         %&#123;_topdir&#125;/SRPMS</span></span><br><span class="line"><span class="meta">%</span><span class="bash">&#123;_buildrootdir&#125;      %&#123;_topdir&#125;/BUILDROOT</span></span><br><span class="line"><span class="meta">%</span><span class="bash">&#123;_var&#125;               /var</span></span><br><span class="line"><span class="meta">%</span><span class="bash">&#123;_tmppath&#125;           %&#123;_var&#125;/tmp</span></span><br><span class="line"><span class="meta">%</span><span class="bash">&#123;_usr&#125;               /usr</span></span><br><span class="line"><span class="meta">%</span><span class="bash">&#123;_usrsrc&#125;            %&#123;_usr&#125;/src</span></span><br><span class="line"><span class="meta">%</span><span class="bash">&#123;_docdir&#125;            %&#123;_datadir&#125;/doc</span></span><br><span class="line"><span class="meta">%</span><span class="bash">&#123;buildroot&#125;          %&#123;_buildrootdir&#125;/%&#123;name&#125;-%&#123;version&#125;-%&#123;release&#125;.%&#123;_arch&#125;</span></span><br><span class="line"><span class="meta">$</span><span class="bash">RPM_BUILD_ROOT       %&#123;buildroot&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-3-SPEC文件"><a href="#2-3-SPEC文件" class="headerlink" title="2.3 SPEC文件"></a>2.3 SPEC文件</h2><p>文件内容可分为两部分：文件头以及内容。</p>
<h3 id="2-3-1-文件头"><a href="#2-3-1-文件头" class="headerlink" title="2.3.1 文件头"></a>2.3.1 文件头</h3><p>文件头是一些基本信息的定义，如Name、Version等，这里的字段值在后面可通过%{name}、%{version}的形式引用。</p>
<ul>
<li>Summary</li>
<li>Name</li>
<li>Version</li>
<li>Release</li>
<li>Packager</li>
<li>Vendor</li>
<li>License</li>
<li>Copyright</li>
<li>Group</li>
<li>Source</li>
<li>BuildRequires</li>
<li>Requires</li>
<li>BuildRoot</li>
<li>Prefix</li>
<li>BuildArch</li>
<li>description</li>
<li>URL</li>
</ul>
<h3 id="2-3-2-主体"><a href="#2-3-2-主体" class="headerlink" title="2.3.2 主体"></a>2.3.2 主体</h3><ul>
<li>%prep</li>
</ul>
<p>预处理阶段，通常是执行解压源程序包的命令</p>
<p>一般包含%setup与%patch两个命令，%setup用于解压软件包，%patch用于将补丁文件加到解开的源程序中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash">setup -n %&#123;name&#125;-%&#123;version&#125;</span></span><br></pre></td></tr></table></figure>

<p>就是将%sourcedir（<del>/rpmbuild/SOURCES）里的包解压到</del>/rpmbuild/BUILD/%{name}-%{version}中</p>
<p>另外还有其他命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash">setup 不加任何选项，仅将软件包打开。</span></span><br><span class="line"><span class="meta">%</span><span class="bash">setup -a 切换目录前，解压指定 Source 文件，例如 `-a 0` 表示解压 `Source0`</span></span><br><span class="line"><span class="meta">%</span><span class="bash">setup -n newdir 将软件包解压在newdir目录。</span></span><br><span class="line"><span class="meta">%</span><span class="bash">setup -c 解压缩之前先产生目录。</span></span><br><span class="line"><span class="meta">%</span><span class="bash">setup -b num 将第 num 个 <span class="built_in">source</span> 文件解压缩。</span></span><br><span class="line"><span class="meta">%</span><span class="bash">setup -D 解压前不删除目录</span></span><br><span class="line"><span class="meta">%</span><span class="bash">setup -T 不使用default的解压缩操作。</span></span><br><span class="line"><span class="meta">%</span><span class="bash">setup -T -b 0 将第 0 个源代码文件解压缩。</span></span><br><span class="line"><span class="meta">%</span><span class="bash">setup -c -n newdir 指定目录名称 newdir，并在此目录产生 rpm 套件。</span></span><br><span class="line"><span class="meta">%</span><span class="bash">patch 最简单的补丁方式，自动指定patch level。</span></span><br><span class="line"><span class="meta">%</span><span class="bash">patch 0 使用第0个补丁文件，相当于%patch ?p 0。</span></span><br><span class="line"><span class="meta">%</span><span class="bash">patch -s 不显示打补丁时的信息。</span></span><br><span class="line"><span class="meta">%</span><span class="bash">patch -T 将所有打补丁时产生的输出文件删除</span></span><br></pre></td></tr></table></figure>

<ul>
<li>%build</li>
</ul>
<p>在%_builddir目录下执行源码包的编译，一般是执行常见的<code>configure</code>和<code>make</code>命令</p>
<ul>
<li>%install</li>
</ul>
<p>将软件安装到虚拟目录中，在%buildrootdir目录下建好目录结构，将需要打包到rpm软件包里的文件从%builddir里拷贝到%_buildrootdir里对应的目录中</p>
<p>通常执行<code>make install</code></p>
<p>这部分的文件路径是绝对路径</p>
<ul>
<li><p>scripts</p>
<ul>
<li><p>%pre</p>
</li>
<li><p>%post</p>
</li>
<li><p>%preun</p>
<p>卸载前执行（升级时会执行）</p>
</li>
<li><p>%postun</p>
<p>卸载后执行（升级时不会执行）</p>
</li>
<li><p>%pretrans</p>
</li>
<li><p>%posttrans</p>
</li>
</ul>
</li>
<li><p>files</p>
</li>
</ul>
<p>说明将%{buildroot}目录下的哪些文件和目录最终打包到rpm包里，这些文档分为三类：说明文档、配置文件以及执行程序，还可以定义文件存取权限、拥有者及属组</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash">defattr (-,root,root,0755)  <span class="comment"># 设置默认权限设置</span></span></span><br><span class="line"><span class="meta">%</span><span class="bash">config [文件路径] <span class="comment"># %config表明是配置文件</span></span></span><br><span class="line"><span class="meta">%</span><span class="bash">doc</span></span><br><span class="line"><span class="meta">%</span><span class="bash">attr</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<p>%{buildroot}里的所有文件/目录都要被明确指定是否要打包到rpm里，即需要被打包的要声明，不需要被打包的也要通过<code>%exclude</code>声明</p>
<ul>
<li>%clean</li>
</ul>
<p>编译后的一些清理工作</p>
<ul>
<li>%changelog</li>
</ul>
<p>记录spec的修改日志</p>
<p><strong>附：</strong></p>
<p>关于define和global的区别     —-&gt;  TO BE CONTINUED~</p>
<h2 id="2-4-rpmbuild执行"><a href="#2-4-rpmbuild执行" class="headerlink" title="2.4 rpmbuild执行"></a>2.4 rpmbuild执行</h2><p>根据日志，涉及到的以下几个步骤会影响到二进制文件内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/lib/rpm/redhat/brp-compress  </span><br><span class="line">/usr/lib/rpm/redhat/brp-strip /usr/bin/strip  </span><br><span class="line">/usr/lib/rpm/redhat/brp-strip-static-archive /usr/bin/strip  </span><br><span class="line">/usr/lib/rpm/redhat/brp-strip-comment-note /usr/bin/strip /usr/bin/objdump  </span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/rpm-software-management/rpm/tree/master/scripts">rpm-software-management/rpm</a>中可找到脚本内容，</p>
<ul>
<li><code>brp-strip</code>用于去除elf二进制文件的debug信息，<code>brp-strip-static-archive</code>去除静态库中的debug信息：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">strip -g &lt;name&gt;</span><br></pre></td></tr></table></figure>

<p>当然各语言在编译时也提供去除debug信息的命令，如go</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go build -ldflags &quot;-w&quot; -o name &lt;file&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>brp-strip-comment-note</code>用于去除二进制文件中的某些section（此处去除的是.commnet以及.note）</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">strip -R .comment -R .note &lt;name&gt;</span><br></pre></td></tr></table></figure>



<p>如果说不希望rpmbuild去除信息，那么需要在spec文件中定义如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash">define __strip /bin/<span class="literal">true</span> <span class="comment"># __strip是两个下划线</span></span></span><br></pre></td></tr></table></figure>



<p><strong>参考：</strong></p>
<ol>
<li><p><a href="https://www.cnblogs.com/michael-xiang/p/10480809.html">RPM包的构建-SPEC基础知识</a></p>
</li>
<li><p><a href="https://my.oschina.net/u/913265/blog/892889">RPM包的制作</a></p>
</li>
</ol>
]]></content>
      <tags>
        <tag>linux,rpm</tag>
      </tags>
  </entry>
</search>
